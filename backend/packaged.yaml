AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: sadalsuud deployment cloudformation script
Globals:
  Function:
    Timeout: 30
Parameters:
  LambdaExecutionRole:
    Type: String
    Default: celestial-service-execution-role
    Description: The primary role in that gives the Lambda function permission to
      do its work.
  NodeJsVer:
    Type: String
    Default: nodejs14.x
  Project:
    Type: String
  Alias:
    Type: String
  TargetEnvr:
    Type: String
    Description: The target environment for API Gateway deployment.
  SubDomain:
    Type: String
  Domain:
    Type: String
Conditions:
  IsProd:
    Fn::Equals:
    - Ref: TargetEnvr
    - prod
Resources:
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment:
          Fn::Sub: ${Project}-${TargetEnvr}-OAI
  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName:
        Fn::Sub: ${Domain}.
      Name:
        Fn::If:
        - IsProd
        - Fn::Sub: ${SubDomain}.${Domain}.
        - Fn::Sub: ${SubDomain}-${TargetEnvr}.${Domain}.
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName:
          Fn::GetAtt:
          - CloudFrontDistribution
          - DomainName
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
    - S3Bucket
    Properties:
      DistributionConfig:
        Aliases:
        - Fn::If:
          - IsProd
          - Fn::Sub: ${SubDomain}.${Domain}
          - Fn::Sub: ${SubDomain}-${TargetEnvr}.${Domain}
        Origins:
        - DomainName:
            Fn::Sub: ${Project}-${TargetEnvr}-y.s3.ap-northeast-1.amazonaws.com
          Id: S3-hosted-website-ID
          S3OriginConfig:
            OriginAccessIdentity:
              Fn::Sub: origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        Enabled: 'true'
        HttpVersion: http2
        CustomErrorResponses:
        - ErrorCachingMinTTL: 300
          ErrorCode: 403
          ResponseCode: 200
          ResponsePagePath: /index.html
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          - PUT
          - PATCH
          - POST
          - DELETE
          TargetOriginId: S3-hosted-website-ID
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
        PriceClass: PriceClass_200
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:278497686406:certificate/8914c993-68c7-4e06-b741-def8fc0270ba
          MinimumProtocolVersion: TLSv1
          SslSupportMethod: sni-only
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${Project}-${TargetEnvr}-y
      WebsiteConfiguration:
        ErrorDocument: error.html
        IndexDocument: index.html
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn:
    - CloudFrontOriginAccessIdentity
    Properties:
      Bucket:
        Fn::Sub: ${Project}-${TargetEnvr}-y
      PolicyDocument:
        Fn::Join:
        - ''
        - - '{ "Version": "2012-10-17", "Id": "PolicyForCloudFrontPrivateContent",
            "Statement": [ { "Sid": "Allow-OAI-Access-To-Bucket", "Effect": "Allow",
            "Principal": { "AWS": "arn:aws:iam::cloudfront:user/CloudFront Origin
            Access Identity '
          - Ref: CloudFrontOriginAccessIdentity
          - '" }, "Action": "s3:GetObject", "Resource": "arn:aws:s3:::'
          - Fn::Sub: ${Project}-${TargetEnvr}-y
          - /*" } ] }
